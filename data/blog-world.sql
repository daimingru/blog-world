/*
Navicat MySQL Data Transfer

Source Server         : blog-world
Source Server Version : 50617
Source Host           : localhost:3306
Source Database       : blog-world

Target Server Type    : MYSQL
Target Server Version : 50617
File Encoding         : 65001

Date: 2016-09-06 16:31:21
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(40) NOT NULL,
  `auther` varchar(25) NOT NULL,
  `article` text NOT NULL,
  `createtime` datetime NOT NULL,
  `deleteflag` tinyint(1) NOT NULL DEFAULT '1',
  `autherid` int(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`,`autherid`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('1', 'jquery完善的处理机制', '戴明儒', '使用jQuery选择器不仅比使用传统的getElementById()和getElementsByTagName()函数简洁得多，而且还能避免某些错误。请看下面例子：\r\n\r\n1 <script>\r\n2    document.getElementById(\"div\").style.color =\"red\";\r\n3 </script>\r\n运行上面代码后，浏览器就会报错，原因是网页中没有ID为div的元素。\r\n\r\n改进后代码如下：\r\n\r\n1 <script>\r\n2     if(document.getElementById(\"div\")){  //用了IF语句来判断是否有ID为div的元素，如果有，执行下面代码 \r\n3         document.getElementById(\"div\").style.color =\"red\"\r\n4     }\r\n5 </script>\r\n这样就可以避免游览器报错，但如果要操作的元素很多，可能对每个元素都要进行一次判断，而jquery方面问题上的处理是非常不错的，即使用JQUERY获取网页中不存在的元素也不会报错。\r\n\r\n代码如下：\r\n\r\n1 <script>\r\n2    $(\"#div\").css(\"color\",\"red\");\r\n3 </script>\r\n有了这个预防措施，即使以后因为某种原因删除网页上某个以前使用过的元素，也不用担心这个网页的JavaScript会报错。\r\n\r\n注意点：\r\n\r\n$(\"div\")获取的永远是jquery对象，即使网页上没有此元素。因此当要用jquery检查某个元素在网页上是否存在时。\r\n\r\n不能使用以下代码：\r\n\r\n1 <script>\r\n2   if($(\"#div\")){\r\n3       $(\"#div\").css(\"color\",red)  //这样游览器会报错\r\n4   }\r\n5 </script>\r\n而是应该跟获取长度来判断。\r\n\r\n代码如下：\r\n\r\n<script>\r\n  if($(\"#div\").length >0){\r\n      $(\"#div\").css(\"color\",red)\r\n  }\r\n</script>\r\n这时候也可以转化为DOM对象来判断。\r\n\r\n代码如下：\r\n\r\n复制代码\r\n 1 <body>\r\n 2    <div id=\"div\">ccccccc</div>\r\n 3 <script src=\"jquery-2.1.4.min.js\"></script>\r\n 4 <script>\r\n 5    var $div = $(\"#div\");\r\n 6    var  div = $div[0];\r\n 7    if(div){\r\n 8        $div.css(\"color\",\"red\")   //此时DIV的颜色就变为red\r\n 9    }\r\n10 </script>\r\n11 </body>\r\n使用jQuery选择器不仅比使用传统的getElementById()和getElementsByTagName()函数简洁得多，而且还能避免某些错误。请看下面例子：\r\n\r\n1 <script>\r\n2    document.getElementById(\"div\").style.color =\"red\";\r\n3 </script>\r\n运行上面代码后，浏览器就会报错，原因是网页中没有ID为div的元素。\r\n\r\n改进后代码如下：\r\n\r\n1 <script>\r\n2     if(document.getElementById(\"div\")){  //用了IF语句来判断是否有ID为div的元素，如果有，执行下面代码 \r\n3         document.getElementById(\"div\").style.color =\"red\"\r\n4     }\r\n5 </script>\r\n这样就可以避免游览器报错，但如果要操作的元素很多，可能对每个元素都要进行一次判断，而jquery方面问题上的处理是非常不错的，即使用JQUERY获取网页中不存在的元素也不会报错。\r\n\r\n代码如下：\r\n\r\n1 <script>\r\n2    $(\"#div\").css(\"color\",\"red\");\r\n3 </script>\r\n有了这个预防措施，即使以后因为某种原因删除网页上某个以前使用过的元素，也不用担心这个网页的JavaScript会报错。\r\n\r\n注意点：\r\n\r\n$(\"div\")获取的永远是jquery对象，即使网页上没有此元素。因此当要用jquery检查某个元素在网页上是否存在时。\r\n\r\n不能使用以下代码：\r\n\r\n1 <script>\r\n2   if($(\"#div\")){\r\n3       $(\"#div\").css(\"color\",red)  //这样游览器会报错\r\n4   }\r\n5 </script>\r\n而是应该跟获取长度来判断。\r\n\r\n代码如下：\r\n\r\n<script>\r\n  if($(\"#div\").length >0){\r\n      $(\"#div\").css(\"color\",red)\r\n  }\r\n</script>\r\n这时候也可以转化为DOM对象来判断。\r\n\r\n代码如下：\r\n\r\n复制代码\r\n 1 <body>\r\n 2    <div id=\"div\">ccccccc</div>\r\n 3 <script src=\"jquery-2.1.4.min.js\"></script>\r\n 4 <script>\r\n 5    var $div = $(\"#div\");\r\n 6    var  div = $div[0];\r\n 7    if(div){\r\n 8        $div.css(\"color\",\"red\")   //此时DIV的颜色就变为red\r\n 9    }\r\n10 </script>\r\n11 </body>\r\n使用jQuery选择器不仅比使用传统的getElementById()和getElementsByTagName()函数简洁得多，而且还能避免某些错误。请看下面例子：\r\n\r\n1 <script>\r\n2    document.getElementById(\"div\").style.color =\"red\";\r\n3 </script>\r\n运行上面代码后，浏览器就会报错，原因是网页中没有ID为div的元素。\r\n\r\n改进后代码如下：\r\n\r\n1 <script>\r\n2     if(document.getElementById(\"div\")){  //用了IF语句来判断是否有ID为div的元素，如果有，执行下面代码 \r\n3         document.getElementById(\"div\").style.color =\"red\"\r\n4     }\r\n5 </script>\r\n这样就可以避免游览器报错，但如果要操作的元素很多，可能对每个元素都要进行一次判断，而jquery方面问题上的处理是非常不错的，即使用JQUERY获取网页中不存在的元素也不会报错。\r\n\r\n代码如下：\r\n\r\n1 <script>\r\n2    $(\"#div\").css(\"color\",\"red\");\r\n3 </script>\r\n有了这个预防措施，即使以后因为某种原因删除网页上某个以前使用过的元素，也不用担心这个网页的JavaScript会报错。\r\n\r\n注意点：\r\n\r\n使用jQuery选择器不仅比使用传统的getElementById()和getElementsByTagName()函数简洁得多，而且还能避免某些错误。请看下面例子：\r\n\r\n1 <script>\r\n2    document.getElementById(\"div\").style.color =\"red\";\r\n3 </script>\r\n运行上面代码后，浏览器就会报错，原因是网页中没有ID为div的元素。\r\n\r\n改进后代码如下：\r\n\r\n1 <script>\r\n2     if(document.getElementById(\"div\")){  //用了IF语句来判断是否有ID为div的元素，如果有，执行下面代码 \r\n3         document.getElementById(\"div\").style.color =\"red\"\r\n4     }\r\n5 </script>\r\n这样就可以避免游览器报错，但如果要操作的元素很多，可能对每个元素都要进行一次判断，而jquery方面问题上的处理是非常不错的，即使用JQUERY获取网页中不存在的元素也不会报错。\r\n\r\n代码如下：\r\n\r\n1 <script>\r\n2    $(\"#div\").css(\"color\",\"red\");\r\n3 </script>\r\n有了这个预防措施，即使以后因为某种原因删除网页上某个以前使用过的元素，也不用担心这个网页的JavaScript会报错。\r\n\r\n注意点：\r\n\r\n$(\"div\")获取的永远是jquery对象，即使网页上没有此元素。因此当要用jquery检查某个元素在网页上是否存在时。\r\n\r\n不能使用以下代码：\r\n\r\n1 <script>\r\n2   if($(\"#div\")){\r\n3       $(\"#div\").css(\"color\",red)  //这样游览器会报错\r\n4   }\r\n5 </script>\r\n而是应该跟获取长度来判断。\r\n\r\n代码如下：\r\n\r\n<script>\r\n  if($(\"#div\").length >0){\r\n      $(\"#div\").css(\"color\",red)\r\n  }\r\n</script>\r\n这时候也可以转化为DOM对象来判断。\r\n\r\n代码如下：\r\n\r\n复制代码\r\n 1 <body>\r\n 2    <div id=\"div\">ccccccc</div>\r\n 3 <script src=\"jquery-2.1.4.min.js\"></script>\r\n 4 <script>\r\n 5    var $div = $(\"#div\");\r\n 6    var  div = $div[0];\r\n 7    if(div){\r\n 8        $div.css(\"color\",\"red\")   //此时DIV的颜色就变为red\r\n 9    }\r\n10 </script>\r\n11 </body>\r\n', '2016-02-20 17:08:09', '1', '1');
INSERT INTO `article` VALUES ('2', '初识js中的闭包', '戴明儒', '今天看了关于js闭包方面的文章，还是有些云里雾里，对于一个菜鸟来说，学习闭包确实有一定的难度，不说别的，能够在网上找到一篇优秀的是那样的不易。\r\n\r\n　　当然之所以闭包难理解，个人觉得是基础知识掌握的不牢，因为闭包牵扯到一些前面的东西，比如作用域\\等等，如果连基本的作用域都没有弄清楚，自然不可能搞懂闭包，还有就是对js的实践比较少，因为你根本就不知道什么时候要用这东西，自然谈不上对闭包的深刻理解。\r\n\r\n　　今天我就简单的说说我目前所理解的闭包，当然可能不完全正确，但是我相信会给你一定的启发。\r\n\r\n \r\n\r\n　　首先我们来谈谈js中的变量，如果你不知道我为什么要说这些，那么你根本没有掌握js的基础，建议回头复习。\r\n\r\njs中分：全局变量 和 局部变量\r\n\r\n　　全局变量：可以在任意位置访问的量就叫全局变量\r\n\r\n　　　　\r\n\r\n1 var age = 20;\r\n2 function a(){\r\n3     console.log(age); >>20\r\n4 }\r\n5 a();\r\n　　局部变量：函数中用var定义的变量，只能在函数中访问这个变量，函数外部访问不了。\r\n\r\n1 function a(){\r\n2     var age = 20;\r\n3 }\r\n4 a();\r\n5 console.log(age); >> Uncaught ReferenceError: age is not defined\r\n \r\n\r\n注意点1：在函数中如果不使用var定义变量那么js引擎会自动添加成全局变量。\r\n\r\n注意点2：全局变量从创建的那一刻起就会一直保存在内存中，除非你关闭这个页面，局部变量当函数运行完以后就会销毁这个变量，假如有多次调用这个函数它下一次调用的时候又会重新创建那个变量，既运行完就销毁，回到最初的状态，简单来说局部变量是一次性的，用完就扔，下次要我再重新创建。\r\n\r\n \r\n\r\n函数的相关知识点：\r\n\r\n        1. 一个函数内可以嵌套多个函数\r\n\r\n　　  2. 函数里面的子函数可以访问它上级定义的变量，注意不只是一级，如果上级没有会继续往上级找，直到找到为止，如果找到全局变量到找不到就会报错。\r\n\r\n 　　　　\r\n\r\n复制代码\r\n1 function a(){\r\n2     var name = \"追梦子\";\r\n3     function b(){\r\n4         console.log(name); >> \"追梦子\"\r\n5     }\r\n6     b();\r\n7 }\r\n8 a();\r\n复制代码\r\n　　  3. 函数的另外一种调用形式，你可以把它叫做自调用，自己调用自己，达到自执行的效果。\r\n\r\n　　　\r\n\r\n1 var a = 0;\r\n2 (function(){\r\n3    console.log(++a); >>1\r\n4 })()\r\n这种方式用()把内容包裹起来，后面的（）表示执行这个函数，可能你会问为什么要把函数包起来，如果不包裹起来，js会把它当作函数声明来处理，如果包裹起来就是表达式，还没有看懂就上网查吧。\r\n\r\n \r\n\r\n \r\n\r\n开始我们正式闭包部分---------------------------- 币包 ---------------像钱包一样的东西，可以把东西包裹起来----------\r\n\r\n      首先我们来看看为什么需要学习闭包，加以理解 -- 0 v  0- -\r\n\r\n \r\n\r\n1 function a(){\r\n2    var num = 0;\r\n3    console.log(++num);\r\n4 }\r\n5 a(); >>1\r\n6 a(); >>1\r\n上面代码输出了两次1，为什么呢？如果你有看我上面的关于变量部分肯定能够想到个大概。\r\n\r\n　　前面我们说过了函数执行完以后，里面的变量（即局部变量）就会销毁，下一次运行又会重新创建那个变量，所以虽然你第一次++num了但是这个变量在第一次执行完毕以后就被销毁了。\r\n\r\n那么我们怎么样才能确保第一次的变量不被销毁，那么就需要我们的闭包出场了。\r\n\r\n温馨提示：JavaScript中有回收机制，函数没有被引用执行完以后这个函数的作用域就会被销毁，如果一个函数被其他变量引用，这个函数的作用域将不会被销毁，（简单来说就是函数里面的变量会被保存下来，你可以理解成全局变量。）\r\n\r\n…………………………………………………………………………………… 当 当 当 ................. 下面有请我们的币包同志\r\n\r\n \r\n\r\n复制代码\r\nfunction a(){\r\n    var aa = 0;\r\n    function b(){\r\n        aa ++;\r\n        console.log(aa);\r\n    }\r\n    return b;\r\n}\r\nvar ab = a();\r\nab(); //1\r\nab(); //2\r\n复制代码\r\n看到了吧里面的变量的值没有被销毁，因为函数a被外部的变量ab引用，所以变量aa没有被回收。\r\n\r\n     如果某个函数被它的父函数之外的一个变量引用，就形成了一个闭包\r\n\r\n还有一种更为常用的闭包写法\r\n\r\n复制代码\r\nvar bi = (function(){\r\n    var a = 0;\r\n    function b(){\r\n        a ++;\r\n        console.log(a);\r\n    }\r\n    return b;\r\n})();\r\n\r\nbi(); //1\r\nbi(); //2\r\nbi(); //3\r\n复制代码\r\n执行过程分析：\r\n\r\n　　首先把一个自执行函数赋值给了bi，这个自执行函数运行完成以后就bi的值就变成了\r\n\r\nfunction b(){\r\n    a ++;\r\n    console.log(a);\r\n}\r\n　　因为我们在上面的代码return回去了b，然后因为这个自执行函数被bi引用所以里面的变量a并没有因为这个自执行函数执完而销毁，而是保存到了内存中，所以我们多次打印bi（）就成了1、2、3\r\n\r\n \r\n\r\n下面我来说一个闭包的使用场景吧。\r\n\r\n 　　没有使用闭包的版本\r\n\r\n复制代码\r\nwindow.onload = function(){\r\n    var ul = document.getElementsByTagName(\"ul\")[0];\r\n    var li = ul.getElementsByTagName(\"li\");\r\n    for(var i=0;i<li.length;i++){\r\n        li[i].onclick = function(){\r\n            console.log(i); //不管我怎么点都是返回6\r\n        }\r\n    }\r\n}\r\n复制代码\r\n　　使用了闭包的版本\r\n\r\n复制代码\r\nwindow.onload = function(){\r\n    var ul = document.getElementsByTagName(\"ul\")[0];\r\n    var li = ul.getElementsByTagName(\"li\");\r\n    for(var i=0;i<li.length;i++){\r\n        (function(i){\r\n            li[i].onclick = function(){\r\n                console.log(i); //点击第几个返回第几个\r\n            }\r\n        })(i)\r\n    }\r\n}\r\n复制代码\r\n、、、、、如果你不理解这个，你只要这样子用就能够达到效果。', '2016-02-20 17:09:23', '1', '1');
INSERT INTO `article` VALUES ('12', '【node.js】通过cookie-parser来设置用户cookie', '戴明儒', '<p>\r\n    <span style=\"font-size: 16px;\">个人博客做到后台验证的时候需要用到cookie百度了一会最后通过cookie-parser来实现了下面直接上干货</span>\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>\r\n<p>\r\n    <span style=\"font-size: 16px;\">首先通过npm安装cookie-parser\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>\r\n<pre class=\"brush: js;\">\r\n   npm install cookie-parser\r\n</pre>\r\n<p>\r\n    <br/>\r\n</p>\r\n<p>\r\n    <span style=\"font-size: 16px;\">服务端配置</span>\r\n</p>\r\n<p>\r\n    <span style=\"font-size: 16px;\">首先引入</span>\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>\r\n<pre class=\"brush: js;\">\r\nvar cookieParser = require(&#39;cookie-parser&#39;);\r\nvar app = express();\r\napp.use(cookieParser());\r\n</pre>\r\n<p>\r\n    <br/>\r\n</p>\r\n<p>\r\n    <span style=\"font-size: 16px;\">紧接着我在吧判断代码单独封装了一个函数</span>\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>\r\n<pre class=\"brush: js;\">\r\nfunction isSession(req.res){\r\n\r\n  if(req.cookies.isVisit){\r\n\r\n    console.log(req.cookies); //如果存在名为isvisit则打印\r\n\r\n  }else{\r\n\r\n    res.render(&#39;login&#39;,{});//否则跳转到登录页面\r\n\r\n  }\r\n\r\n}\r\n</pre>\r\n<p>\r\n    <br/>\r\n</p>\r\n<p>\r\n    <span style=\"font-size: 16px;\">下面是当登录成功后 设置</span>\r\n</p>\r\n<p></p>\r\n<pre class=\"brush: js;\">\r\n    res.cookie(&#39;isVisit&#39;, &#39;admin&#39;, {maxAge: 60 * 10000});//设置isVisit 时间为10分钟\r\n</pre>\r\n<p>\r\n    <br/>\r\n</p>\r\n<p>\r\n    <span style=\"font-size: 16px;\">到此node简单的通过cookie来设置session就实现了。</span>\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>', '2016-04-21 17:04:55', '1', '1');
INSERT INTO `article` VALUES ('15', 'canvas基础学习一', '戴明儒', '<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">开始之前我要插播一条小知识</span>\r\n</p>\r\n<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">在IPHONE上手机号码的默认值显示为拨号连接如果不需要可以设置meta的telephone=no就可以了<br/></span>\r\n</p>\r\n<pre class=\"brush: js;\">&lt;meta name=&quot;format-deletion&quot; content=&quot;telephone=no&quot; /&gt;</pre>\r\n<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">因工作需要今天开始看了一下CANVAS 在此做一个笔记。</span>\r\n</p>\r\n<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">首先可以使用</span>\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>\r\n<pre class=\"brush: js;\">document.getElementById(&#39;canvas&#39;);</pre>\r\n<p>\r\n    <br/>\r\n</p>\r\n<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">来获取canvas对象。然后可以通过</span>\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>\r\n<pre class=\"brush: js;\">canvas.width = 800;canvas.height = 800;</pre>\r\n<p>\r\n    <br/>\r\n</p>\r\n<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">来设置canvas的宽高。</span>\r\n</p>\r\n<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">接下来对canvas的绘制主要用到了 getContext这个方法，这个方法接受一个string类型的参数通常为2d,</span>\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>\r\n<pre class=\"brush: js;\">\r\nvar context = canvas.getContext(&#39;2d&#39;);//使用context对canvas进行绘制\r\ncontext.moveTo(100,100);//接受2个参数X,Y 表示开始的坐标点\r\ncontext.lineWidth = 5;//顾名思义 线条宽度为5\r\ncontext.strokeStyle = &#39;#000000&#39;;//线条的颜色为黑色\r\ncontext.stroke();//确定绘制\r\ncontext.fillStyle = &#39;#000&#39;;//填充颜色\r\ncontext.fill();//确认填充\r\n</pre>\r\n<p>\r\n    <br/>\r\n</p>\r\n<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">如果我们要绘制多个图形那么只需要将绘制头部添加</span>\r\n</p>\r\n<pre class=\"brush: js;\">context.beginPath();</pre>\r\n<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">尾部添加</span>\r\n</p>\r\n<pre class=\"brush: js;\">context.closePath();</pre>\r\n<p style=\"line-height: 1.5em;\">\r\n    <span style=\"font-size: 16px;\">暂时就写这么多吧 都是一些基本知识</span>\r\n</p>', '2016-05-10 15:54:16', '1', '1');
INSERT INTO `article` VALUES ('17', '原生JS封装Ajax请求', '戴明儒', '<p>今天项目中做了一个游戏，但是和JQ相冲突，期间需要用到AJAX ， &nbsp;对于我这种用习惯了JQ封装好的AJAX的人，突然来写原生是一件多么痛苦的事情，所以找了个封装好的轮子，就不自己造了，如果以后需要可以随时用。<br/></p><p>下面附上代码</p><p><br/></p><p><br/></p><pre class=\"brush: js;\">function&nbsp;ajax(options)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options&nbsp;=&nbsp;options&nbsp;||&nbsp;{};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.type&nbsp;=&nbsp;(options.type&nbsp;||&nbsp;&quot;GET&quot;).toUpperCase();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.dataType&nbsp;=&nbsp;options.dataType&nbsp;||&nbsp;&quot;json&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;formatParams(options.data);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建&nbsp;-&nbsp;非IE6&nbsp;-&nbsp;第一步\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(window.XMLHttpRequest)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;xhr&nbsp;=&nbsp;new&nbsp;XMLHttpRequest();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//IE6及其以下版本浏览器\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;xhr&nbsp;=&nbsp;new&nbsp;ActiveXObject(&#39;Microsoft.XMLHTTP&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//接收&nbsp;-&nbsp;第三步\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhr.onreadystatechange&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(xhr.readyState&nbsp;==&nbsp;4)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;status&nbsp;=&nbsp;xhr.status;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(status&nbsp;&gt;=&nbsp;200&nbsp;&amp;&amp;&nbsp;status&nbsp;&lt;&nbsp;300)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.success&nbsp;&amp;&amp;&nbsp;options.success(xhr.responseText,&nbsp;xhr.responseXML);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.fail&nbsp;&amp;&amp;&nbsp;options.fail(status);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//连接&nbsp;和&nbsp;发送&nbsp;-&nbsp;第二步\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(options.type&nbsp;==&nbsp;&quot;GET&quot;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhr.open(&quot;GET&quot;,&nbsp;options.url&nbsp;+&nbsp;&quot;?&quot;&nbsp;+&nbsp;params,&nbsp;true);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhr.send(null);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(options.type&nbsp;==&nbsp;&quot;POST&quot;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhr.open(&quot;POST&quot;,&nbsp;options.url,&nbsp;true);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//设置表单提交时的内容类型\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhr.setRequestHeader(&quot;Content-Type&quot;,&nbsp;&quot;application/x-www-form-urlencoded&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhr.send(params);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;//格式化参数\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;formatParams(data)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;arr&nbsp;=&nbsp;[];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;name&nbsp;in&nbsp;data)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr.push(encodeURIComponent(name)&nbsp;+&nbsp;&quot;=&quot;&nbsp;+&nbsp;encodeURIComponent(data[name]));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr.push((&quot;v=&quot;&nbsp;+&nbsp;Math.random()).replace(&quot;.&quot;,&quot;&quot;));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;arr.join(&quot;&amp;&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p>然后是调用方法</p><p><br/></p><pre class=\"brush: js;\">ajax({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;&quot;./TestXHR.aspx&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//请求地址\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&quot;POST&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//请求方式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:&nbsp;{&nbsp;name:&nbsp;&quot;super&quot;,&nbsp;age:&nbsp;20&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//请求参数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataType:&nbsp;&quot;json&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success:&nbsp;function&nbsp;(response,&nbsp;xml)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;此处放成功后执行的代码\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail:&nbsp;function&nbsp;(status)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;此处放失败后执行的代码\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});</pre>', '2016-05-13 11:10:23', '1', '1');
INSERT INTO `article` VALUES ('18', 'Require.js 学习', '戴明儒', '<p style=\"box-sizing: border-box; font-family: &quot;Hiragino Sans GB&quot;, SimSun, sans-serif; line-height: 1.6; margin-top: 26px; margin-bottom: 26px; color: rgb(17, 17, 17); white-space: normal; background-color: rgb(250, 250, 250);\">\r\n    <span style=\"box-sizing: border-box; font-weight: 700;\">Require JS</span>(<a href=\"http://requirejs.org/\" target=\"_blank\" style=\"box-sizing: border-box; color: rgb(127, 219, 255); text-decoration: none; transition: color 0.2s; background: 0px 0px;\">官网</a>) 是一个 JavaScript 文件或模块的加载器，它可以根据不同页面对不同模块的需求，按照你的设置依次加载并执行所有的 JavaScript 文件。使用 Require JS 主要有两个目的：\r\n</p>\r\n<ul style=\"box-sizing: border-box; color: rgb(17, 17, 17); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Lucida Grande&quot;, &quot;Luxi Sans&quot;, Arial; line-height: 16px; white-space: normal; background-color: rgb(250, 250, 250);\" class=\" list-paddingleft-2\">\r\n    <li>\r\n        <p>\r\n            解耦代码，方便代码重用和管理\r\n        </p>\r\n    </li>\r\n    <li>\r\n        <p>\r\n            加速页面加载，内置优化引擎（需服务器支持），自动异步加载依赖项，将所有需要加载的文件自动合并为一个文件，减少 HTTP 请求\r\n        </p>\r\n    </li>\r\n</ul>\r\n<p style=\"box-sizing: border-box; font-family: &quot;Hiragino Sans GB&quot;, SimSun, sans-serif; line-height: 1.6; margin-top: 26px; margin-bottom: 26px; color: rgb(17, 17, 17); white-space: normal; background-color: rgb(250, 250, 250);\">\r\n    Require JS 同时支持整合 jQuery、CommonJS、Node JS 等，而且对浏览器有不错的兼容性（IE 6+，你懂的）。\r\n</p>\r\n<p style=\"box-sizing: border-box; font-family: &quot;Hiragino Sans GB&quot;, SimSun, sans-serif; line-height: 1.6; margin-top: 26px; margin-bottom: 26px; color: rgb(17, 17, 17); white-space: normal; background-color: rgb(250, 250, 250);\">\r\n    原文链接：<a href=\"https://undefinedblog.com/primer-for-require-js/;\" _src=\"https://undefinedblog.com/primer-for-require-js/;\">https://undefinedblog.com/primer-for-require-js/;</a> \r\n</p>\r\n<p style=\"box-sizing: border-box; font-family: &quot;Hiragino Sans GB&quot;, SimSun, sans-serif; line-height: 1.6; margin-top: 26px; margin-bottom: 26px; color: rgb(17, 17, 17); white-space: normal; background-color: rgb(250, 250, 250);\">\r\n    将单独功能单独封装成一个模块 需要加载是引用。\r\n</p>\r\n<br />\r\n<pre class=\"brush: js;\">\r\n\r\n    &lt;script data-main=&quot;js/app&quot; src=&quot;js/require.js&quot;&gt;&lt;/script&gt;\r\n\r\n    //app.js指入口文件，页面首先加载app.js，后续依赖模块可以通过在这个里面进行设置。\r\n\r\n    require.config({\r\n\r\n    path: {\r\n\r\n    event:&#39;event&#39;\r\n\r\n    }\r\n\r\n    });\r\n\r\n    //path：可以为依赖设置指定路径，在require的时候只要指定path就好了，日后要是目录变更也直接修改path就可以。\r\n\r\n    //baseUrl：指定了一个目录，然后require基于这个目录来寻找依赖的模块。默认讲baseUrl设置为data-main指定的文件路径。\r\n\r\n    require([&quot;event&quot;], function(event) {\r\n\r\n    &nbsp; &nbsp; console.log(event.axb());\r\n\r\n    });\r\n\r\n    //通过require来加载一个event.js。\r\n\r\n</pre>', '2016-07-08 15:43:36', '1', '0');
INSERT INTO `article` VALUES ('19', '遍历json', '戴明儒', '<p>\n    假如有这样一个json字符串\n</p>\n<pre class=\"brush: js;\">var people = { \n    		&quot;programmers&quot;: [ \n    		    { &quot;firstName&quot;: &quot;Brett&quot;, &quot;lastName&quot;:&quot;McLaughlin&quot;, &quot;email&quot;: &quot;aaaa&quot; },\n		        { &quot;firstName&quot;: &quot;Jason&quot;, &quot;lastName&quot;:&quot;Hunter&quot;, &quot;email&quot;: &quot;bbbb&quot; },\n		        { &quot;firstName&quot;: &quot;Elliotte&quot;, &quot;lastName&quot;:&quot;Harold&quot;, &quot;email&quot;: &quot;cccc&quot; }\n            ],\n            &quot;authors&quot;: [\n				{ &quot;firstName&quot;: &quot;Isaac&quot;, &quot;lastName&quot;: &quot;Asimov&quot;, &quot;email&quot;: &quot;science fiction&quot; },\n				{ &quot;firstName&quot;: &quot;Tad&quot;, &quot;lastName&quot;: &quot;Williams&quot;, &quot;email&quot;: &quot;fantasy&quot; },\n				{ &quot;firstName&quot;: &quot;Frank&quot;, &quot;lastName&quot;: &quot;Peretti&quot;, &quot;email&quot;: &quot;christian fiction&quot; }\n			],\n}</pre>\n<p>\n    如何遍历呢\n</p>\n<pre class=\"brush: js;\">\n        var html = &#39;&#39;;\n		var $_ = document.getElementById(&#39;td_htm&#39;);\n		for(var key in people){\n		    html += &#39;&#39;;\n		    for(var i = 0;i&lt;people[key].length;i++){\n		    	html += &#39;&#39; + key + &#39;&#39; + people[key][i].firstName + &#39;&#39; + people[key][i].lastName + &#39;&#39; + people[key][i].email + &#39;&#39;;\n		    }\n	    }\n	    $_.innerHTML = html;</pre>\n<p>\n    就ok了。\n\n这里要注意的是如果json中属性名相同，会后一个覆盖前一个，希望大家注意。\n</p>', '2016-07-11 15:52:14', '1', '1');
INSERT INTO `article` VALUES ('20', '【转载】gulp入门使用', '戴明儒', '<p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">本文为转载文章，原文链接是:</p><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\"><a href=\"http://www.tuicool.com/articles/FJVNZf\">http://www.tuicool.com/articles/FJVNZf</a></p><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">本文假设你之前没有用过任何任务脚本（task runner）和命令行工具，一步步教你上手Gulp。不要怕，它其实很简单，我会分为五步向你介绍gulp并帮助你完成一些惊人的事情。那就直接开始吧。</p><h2 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">第一步：安装Node</h2><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">首先，最基本也最重要的是，我们需要搭建node环境。访问&nbsp;<a rel=\"nofollow,noindex\" href=\"http://nodejs.org/\" style=\"color: rgb(148, 148, 148); text-decoration: none; transition: 0.25s; outline: none 0px; border-bottom: 1px dashed rgb(148, 148, 148); font-style: italic; font-weight: bold;\">http://nodejs.org</a>&nbsp;，然后点击大大的绿色的&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">install</code>&nbsp;按钮，下载完成后直接运行程序，就一切准备就绪。&nbsp;<a rel=\"nofollow,noindex\" href=\"https://npmjs.org/\" style=\"color: rgb(148, 148, 148); text-decoration: none; transition: 0.25s; outline: none 0px; border-bottom: 1px dashed rgb(148, 148, 148); font-style: italic; font-weight: bold;\"><strong style=\"text-indent: 0px;\">npm</strong>&nbsp;</a>会随着安装包一起安装，稍后会用到它。</p><h2 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">第二步：使用命令行</h2><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">也许现在你还不是很了解什么是命令行——OSX中的终端（Terminal），windows中的命令提示符（Command Prompt），但很快你就会知道。它看起来没那么简单，但一旦掌握了它的窍门，就可以很方便的执行很多命令行程序，比如Sass，Yeoman和Git等，这些都是非常有用的工具。</p><blockquote style=\"padding: 0px 0px 0px 10px; margin: 0px 0px 1.5em; border-left: 5px solid rgb(10, 162, 132); font-size: 14px; word-wrap: break-word; word-break: break-all; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 27.2px; white-space: normal; background-color: rgb(246, 246, 246);\"><p style=\"margin-top: 0px; margin-bottom: 0px; font-size: 16px; font-weight: inherit; line-height: 1.7em; font-style: italic;\">如果你很熟悉命令行，直接跳到步骤四。</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">为了确保Node已经正确安装，我们执行几个简单的命令。</p><pre class=\"prettyprint undefined\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">node&nbsp;-v</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">回车（Enter），如果正确安装的话，你会看到所安装的Node的版本号，接下来看看npm。</p><pre class=\"prettyprint undefined\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">npm&nbsp;-v</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">这同样能得到npm的版本号。</p><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">如果这两行命令没有得到返回，可能node就没有安装正确，尝试重启下命令行工具，如果还不行的话，只能回到第一步进行重装。</p><h2 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">第三步：定位到项目</h2><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">现在，我们已经大致了解了命令行并且知道如何简单使用它，接下来只需要两个简单的命令就能定位到文件目录并看看目录里都有些什么文件。</p><ol style=\"padding: 0px; margin-bottom: 0.75em; margin-left: 25px; line-height: 27.2px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\" class=\" list-paddingleft-2\"><li><p>cd，定位到目录</p></li><li><p>ls，列出文件列表</p></li></ol><blockquote style=\"padding: 0px 0px 0px 10px; margin: 0px 0px 1.5em; border-left: 5px solid rgb(10, 162, 132); font-size: 14px; word-wrap: break-word; word-break: break-all; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 27.2px; white-space: normal; background-color: rgb(246, 246, 246);\"><p style=\"margin-top: 0px; margin-bottom: 0px; font-size: 16px; font-weight: inherit; line-height: 1.7em; font-style: italic;\">建议多敲敲这两个命令，了解文件系统并知道文件都在哪里。</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">习惯使用了这两个命令后，就要进入我们的项目目录，这个目录各不相同，举个例子，这是我进入我项目目录的命令：</p><pre class=\"prettyprint perl\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">cd&nbsp;/Applications/XAMPP/xamppfiles/htdocs/my-project</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">成功进入项目目录后，我们开始安装gulp。</p><h2 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">第四步：安装gulp</h2><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">我们已经知道如何使用命令行，现在尝试点新的东西，认识npm然后安装gulp。</p><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">NPM是基于命令行的node包管理工具，它可以将node的程序模块安装到项目中，在它的&nbsp;<a rel=\"nofollow,noindex\" href=\"https://npmjs.org/\" style=\"color: rgb(148, 148, 148); text-decoration: none; transition: 0.25s; outline: none 0px; border-bottom: 1px dashed rgb(148, 148, 148); font-style: italic; font-weight: bold;\">官网</a>&nbsp;中可以查看和搜索所有可用的程序模块。</p><pre class=\"prettyprint sql\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">sudo&nbsp;npm&nbsp;install&nbsp;-g&nbsp;gulp</pre><ol style=\"padding: 0px; margin-bottom: 0.75em; margin-left: 25px; line-height: 27.2px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\" class=\" list-paddingleft-2\"><li><p>sudo是以管理员身份执行命令，一般会要求输入电脑密码</p></li><li><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 1.7em;\">npm是安装node模块的工具，执行install命令</p></li><li><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 1.7em;\">-g表示在全局环境安装，以便任何项目都能使用它</p></li><li><p>最后，gulp是将要安装的node模块的名字</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">运行时注意查看命令行有没有错误信息，安装完成后，你可以使用下面的命令查看gulp的版本号以确保gulp已经被正确安装。</p><pre class=\"prettyprint undefined\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">gulp&nbsp;-v</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">接下来，我们需要将gulp安装到项目本地</p><pre class=\"prettyprint undefined\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">npm&nbsp;install&nbsp;—-save-dev&nbsp;gulp</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">这里，我们使用&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">—-save-dev</code>&nbsp;来更新package.json文件，更新&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">devDependencies</code>值，以表明项目需要依赖gulp。</p><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\"><code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">Dependencies</code>&nbsp;可以向其他参与项目的人指明项目在开发环境和生产环境中的node模块依懒关系，想要更加深入的了解它可以看看&nbsp;<a rel=\"nofollow,noindex\" href=\"https://npmjs.org/doc/json.html#dependencies\" style=\"color: rgb(148, 148, 148); text-decoration: none; transition: 0.25s; outline: none 0px; border-bottom: 1px dashed rgb(148, 148, 148); font-style: italic; font-weight: bold;\">package.json文档</a>&nbsp;。</p><h2 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">第五步：新建Gulpfile文件，运行gulp</h2><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">安装好gulp后我们需要告诉它要为我们执行哪些任务，首先，我们自己需要弄清楚项目需要哪些任务。</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>检查Javascript</p></li><li><p>编译Sass（或Less之类的）文件</p></li><li><p>合并Javascript</p></li><li><p>压缩并重命名合并后的Javascript</p></li></ul><h3 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">安装依赖</h3><pre class=\"prettyprint sql\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">npm&nbsp;install&nbsp;gulp-jshint&nbsp;gulp-sass&nbsp;gulp-concat&nbsp;gulp-uglify&nbsp;gulp-rename&nbsp;--save-dev</pre><blockquote style=\"padding: 0px 0px 0px 10px; margin: 0px 0px 1.5em; border-left: 5px solid rgb(10, 162, 132); font-size: 14px; word-wrap: break-word; word-break: break-all; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 27.2px; white-space: normal; background-color: rgb(246, 246, 246);\"><p style=\"margin-top: 0px; margin-bottom: 0px; font-size: 16px; font-weight: inherit; line-height: 1.7em; font-style: italic;\">提醒下，如果以上命令提示权限错误，需要添加&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">sudo</code>&nbsp;再次尝试。</p></blockquote><h3 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">新建gulpfile文件</h3><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">现在，组件都安装完毕，我们需要新建gulpfile文件以指定gulp需要为我们完成什么任务。</p><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">gulp只有五个方法：&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">task</code>&nbsp;，&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">run</code>&nbsp;，&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">watch</code>&nbsp;，&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">src</code>&nbsp;，和&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">dest</code>&nbsp;，在项目根目录新建一个js文件并命名为&nbsp;<strong style=\"text-indent: 0px;\">gulpfile.js</strong>&nbsp;，把下面的代码粘贴进去：</p><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\"><strong style=\"text-indent: 0px;\">gulpfile.js</strong></p><pre class=\"prettyprint php\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">//&nbsp;引入&nbsp;gulpvar&nbsp;gulp&nbsp;=&nbsp;require(&#39;gulp&#39;);&nbsp;\n\n//&nbsp;引入组件var&nbsp;jshint&nbsp;=&nbsp;require(&#39;gulp-jshint&#39;);var&nbsp;sass&nbsp;=&nbsp;require(&#39;gulp-sass&#39;);var&nbsp;concat&nbsp;=&nbsp;require(&#39;gulp-concat&#39;);var&nbsp;uglify&nbsp;=&nbsp;require(&#39;gulp-uglify&#39;);var&nbsp;rename&nbsp;=&nbsp;require(&#39;gulp-rename&#39;);//&nbsp;检查脚本gulp.task(&#39;lint&#39;,&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.src(&#39;./js/*.js&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(jshint())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(jshint.reporter(&#39;default&#39;));\n});//&nbsp;编译Sassgulp.task(&#39;sass&#39;,&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.src(&#39;./scss/*.scss&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(sass())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;./css&#39;));\n});//&nbsp;合并，压缩文件gulp.task(&#39;scripts&#39;,&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.src(&#39;./js/*.js&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(concat(&#39;all.js&#39;))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;./dist&#39;))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(rename(&#39;all.min.js&#39;))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(uglify())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;./dist&#39;));\n});//&nbsp;默认任务gulp.task(&#39;default&#39;,&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.run(&#39;lint&#39;,&nbsp;&#39;sass&#39;,&nbsp;&#39;scripts&#39;);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;监听文件变化\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.watch(&#39;./js/*.js&#39;,&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gulp.run(&#39;lint&#39;,&nbsp;&#39;sass&#39;,&nbsp;&#39;scripts&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;});\n});</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">现在，分段解释下这段代码。</p><h3 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">引入组件</h3><pre class=\"prettyprint php\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">var&nbsp;gulp&nbsp;=&nbsp;require(&#39;gulp&#39;);&nbsp;\n\nvar&nbsp;jshint&nbsp;=&nbsp;require(&#39;gulp-jshint&#39;);var&nbsp;sass&nbsp;=&nbsp;require(&#39;gulp-sass&#39;);var&nbsp;concat&nbsp;=&nbsp;require(&#39;gulp-concat&#39;);var&nbsp;uglify&nbsp;=&nbsp;require(&#39;gulp-uglify&#39;);var&nbsp;rename&nbsp;=&nbsp;require(&#39;gulp-rename&#39;);</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">这一步，我们引入了核心的gulp和其他依赖组件，接下来，分开创建lint, sass, scripts 和 default这四个不同的任务。</p><h3 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">Lint任务</h3><pre class=\"prettyprint perl\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">gulp.task(&#39;lint&#39;,&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.src(&#39;./js/*.js&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(jshint())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(jshint.reporter(&#39;default&#39;));\n});</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">Link任务会检查&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">js/</code>&nbsp;目录下得js文件有没有报错或警告。</p><h3 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">Sass任务</h3><pre class=\"prettyprint perl\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">gulp.task(&#39;sass&#39;,&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.src(&#39;./scss/*.scss&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(sass())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;./css&#39;));\n});</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">Sass任务会编译&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">scss/</code>&nbsp;目录下的scss文件，并把编译完成的css文件保存到&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">/css</code>目录中。</p><h3 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">Scripts 任务</h3><pre class=\"prettyprint perl\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">gulp.task(&#39;scripts&#39;,&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.src(&#39;./js/*.js&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(concat(&#39;all.js&#39;))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;./dist&#39;))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(rename(&#39;all.min.js&#39;))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(uglify())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;./dist&#39;));\n});</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">scripts任务会合并&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">js/</code>&nbsp;目录下得所有得js文件并输出到&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">dist/</code>&nbsp;目录，然后gulp会重命名、压缩合并的文件，也输出到&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">dist/</code>&nbsp;目录。</p><h3 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">default任务</h3><pre class=\"prettyprint javascript\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">gulp.task(&#39;default&#39;,&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.run(&#39;lint&#39;,&nbsp;&#39;sass&#39;,&nbsp;&#39;scripts&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.watch(&#39;./js/*.js&#39;,&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gulp.run(&#39;lint&#39;,&nbsp;&#39;sass&#39;,&nbsp;&#39;scripts&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;});\n});</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">这时，我们创建了一个基于其他任务的default任务。使用&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">.run()</code>&nbsp;方法关联和运行我们上面定义的任务，使用&nbsp;<code class=\"prettyprint\" style=\"padding: 2px 4px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; border-radius: 3px; border: none; background-color: rgb(247, 247, 249);\">.watch()</code>&nbsp;方法去监听指定目录的文件变化，当有文件变化时，会运行回调定义的其他任务。</p><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">现在，回到命令行，可以直接运行gulp任务了。</p><pre class=\"prettyprint undefined\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">gulp</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">这将执行定义的default任务，换言之，这和以下的命令式同一个意思</p><pre class=\"prettyprint cs\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">gulp&nbsp;default</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">当然，我们可以运行在gulpfile.js中定义的任意任务，比如，现在运行sass任务：</p><pre class=\"prettyprint undefined\" style=\"padding: 0.3em; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; color: rgb(51, 51, 51); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 12px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; border: 1px solid rgba(0, 0, 0, 0.14902); overflow-y: auto; background-color: rgb(246, 246, 246);\">gulp&nbsp;sass</pre><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">(Kimi: 哇塞，酷比了哎~)</p><h2 style=\"margin: 0px 0px 0.5em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; white-space: normal; background-color: rgb(254, 254, 254);\">结束语</h2><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">现在已经做到了设置gulp任务然后运行他们，现在再回顾下之前学习的。</p><ol style=\"padding: 0px; margin-bottom: 0.75em; margin-left: 25px; line-height: 27.2px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\" class=\" list-paddingleft-2\"><li><p>学习了安装Node环境</p></li><li><p>学习了简单使用命令行</p></li><li><p>学习了用命令行进入项目目录</p></li><li><p>学习了使用npm和安装gulp</p></li><li><p>学习了如何运行gulp任务</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 0.75em; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, STXihei, &quot;Microsoft YaHei&quot;, 微软雅黑, sans-serif; white-space: normal; background-color: rgb(254, 254, 254);\">另外，有一些参考资源供进一步学习：</p><p><br/></p>', '2016-08-19 11:51:11', '1', '1');
INSERT INTO `article` VALUES ('21', 'vue.js小结（1）', '戴明儒', '<p><span style=\"font-size: 14px;\">vue.js分使用版本和开发版本</span></p><p><span style=\"font-size: 14px;\">实际开发过程中使用开发版本可以更友好的接受错误信息</span></p><p><br/></p><p><span style=\"font-size: 20px;\"><strong>vue.js使用</strong></span></p><p><span style=\"font-size: 20px;\"><strong><br/></strong></span></p><p><span style=\"font-size: 14px;\">vue在使用过程中直接引入vue的文件即可</span><br/></p><p><span style=\"font-size: 14px;\">也可以从vue的CDN上进行获取</span></p><p><span style=\"font-size: 14px;\">同时npm上也提供了对vue的install</span></p><p><span style=\"font-size: 14px;\">可以在npmcdn.com/vue/上查看vue的源代码</span></p><p><span style=\"font-size: 14px;\"><br/></span></p><p><strong style=\"font-size: 20px; white-space: normal;\">vue.js的语法</strong></p><p><strong style=\"font-size: 20px; white-space: normal;\"><br/></strong></p><p><span style=\"font-size: 14px;\">vue使用两个{{ data }}来包裹变量</span></p><p><span style=\"font-size: 14px;\"><br/></span></p><p><span style=\"font-size: 14px;\">例：</span></p><p><span style=\"font-size: 14px;\"><br/></span></p><p><span style=\"font-size: 14px;\">&lt;div id=&quot;app&quot;&gt;</span></p><p>&nbsp; &lt;h2&gt;{{ data }}&lt;/h2&gt;</p><p>&lt;/div&gt;</p><p><br/></p><p>JavaScript 》》</p><p><br/></p><p>new Vue({</p><p>&nbsp; el:&quot;#app&quot;,</p><p>&nbsp; data:{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;data:&quot;Hello world!&quot;<br/></p><p>&nbsp; }<br/></p><p>})</p><p><br/></p><p>每个APP可以<span style=\"font-size: 20px;\">看做是</span>单独的作用域模块，多个作用域模块之间相互不影响</p><p><br/></p><p><strong style=\"white-space: normal; font-size: 20px;\">vue.js实现双向绑定</strong></p><p><strong style=\"white-space: normal; font-size: 20px;\"><br/></strong></p><p>和angular.js一样vue.js也具有数据的双向绑定功能，在vue中使用双向绑定的方式和angular相似通过v-model的指令来实现</p><p><br/></p><p>例：</p><p><br/></p><p>&lt;div id=&quot;app&quot;&gt;</p><p>&nbsp; &lt;h2&gt;{{ data }}&lt;/h2&gt;</p><p>&nbsp; &lt;input type=&quot;text&quot; v-model=&quot;data&quot; /&gt;</p><p>&lt;/div&gt;</p><p><br/></p><p>JavaScript 》》</p><p><br/></p><p>new Vue({</p><p>&nbsp; el:&quot;#app&quot;,</p><p>&nbsp; data:{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;data:&quot;Hello world!&quot;<br/></p><p>&nbsp; }</p><p>})</p><p><br/></p><p><strong style=\"white-space: normal; font-size: 20px;\">vue.js渲染</strong></p><p><strong style=\"white-space: normal; font-size: 20px;\"><br/></strong></p><p><span style=\"font-size: 14px;\">vue可以通过v-for的方法来实现数据的循环渲染（以接受数组为例）</span></p><p><span style=\"font-size: 14px;\"><br/></span></p><p>例：<br/></p><p><br/></p><p>var data = [{text:&#39;这是第一条数据&#39;},{text:&#39;这是第二条数据&#39;},{text:&#39;这是第三条数据&#39;}];</p><p><br/></p><p>JavaScript 》》</p><p><br/></p><p>new Vue({</p><p>&nbsp; el:&quot;#app&quot;,</p><p>&nbsp; data:[</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{text:&#39;这是第一条数据&#39;},<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;{text:&#39;这是第二条数据&#39;},<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;{text:&#39;这是第三条数据&#39;}</p><p>&nbsp; ]<br/></p><p>})</p><p><br/></p><p>html的书写就是</p><p><br/></p><p>&lt;div id=&quot;app&quot;&gt;</p><p>&nbsp; &lt;ul&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li v-for=&quot;datas in data&quot;&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;{{ datas.text }}<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;<br/></p><p>&nbsp; &lt;/ul&gt;</p><p>&lt;/div&gt;</p><p><br/></p><p><strong style=\"white-space: normal; font-size: 20px;\">vue.js用户输入</strong></p><p><strong style=\"white-space: normal; font-size: 20px;\"><br/></strong></p><p><span style=\"font-size: 16px;\">&lt;div id=&quot;app&quot;&gt;</span></p><p><span style=\"font-size: 16px;\">&nbsp; &lt;h2&gt;{{ data }}&lt;/h2&gt;</span></p><p><span style=\"font-size: 16px;\">&nbsp; &lt;button type=&quot;button&quot; v-on:click=&quot;reset&quot;&gt;点击重置&lt;/button&gt;</span></p><p><span style=\"font-size: 16px;\">&lt;/div&gt;</span></p><p><span style=\"font-size: 16px;\"><br/></span></p><p><span style=\"font-size: 16px;\">JavaScript 》》</span></p><p><span style=\"font-size: 16px;\"><br/></span></p><p>new Vue({<br/>&nbsp; el:&quot;#app&quot;,</p><p>&nbsp; data:{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;data:&#39;first value&#39;,<br/></p><p>&nbsp; },<br/></p><p>&nbsp; methods:{</p><p>&nbsp; &nbsp; &nbsp;reset:function(){</p><p>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;this.data = &#39;new vlue&#39;<br/>&nbsp; &nbsp; &nbsp;}</p><p>&nbsp; }</p><p>})</p><p><br/></p>', '2016-08-19 19:47:42', '1', '0');
INSERT INTO `article` VALUES ('22', 'Call  和 apply 区别详解！', '戴明儒', '<p><span style=\"font-size: 14px; widows: 1; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\">在js中call和apply它们的作用都是将函数绑定到另外一个对象上去运行，两者仅在定义参数方式有所区别,下面我来给大家介绍一下call和apply用法。</span><span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; line-height: 26px; widows: 1; background-color: rgb(255, 255, 255);\"></span></p><p style=\"font-size: 14px; white-space: normal; widows: 1; margin-top: 20px; margin-bottom: 20px; padding-top: 0px; padding-bottom: 0px; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\">在web前端开发过程中，我们经常需要改变this指向，通常我们想到的就是用call方法，但是对于call的理解很多人不是很清晰，那么下面小编就给大家详细说一说call和apply的详细知识</p><h3 style=\"margin: 0px; padding: 0px; white-space: normal; widows: 1; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\"><strong>一、call方法的定义</strong></h3><p style=\"font-size: 14px; white-space: normal; widows: 1; margin-top: 20px; margin-bottom: 20px; padding-top: 0px; padding-bottom: 0px; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\">大家在百度里面可以搜索call，关于call的定义都很拗口。在我的理解，a.call(b,arg1,arg2..)就是a对象的方法应用到b对象上。例如如下例子：</p><table align=\"center\" cellpadding=\"1\" cellspacing=\"1\" width=\"620\"><tbody><tr class=\"firstRow\"><td bgcolor=\"#FFE7CE\" height=\"27\" width=\"464\">&nbsp;代码如下</td><td align=\"center\" bgcolor=\"#FFE7CE\" width=\"109\"><br/></td></tr><tr><td bgcolor=\"#FFFFFF\" class=\"copyclass\" colspan=\"2\" height=\"auto\" id=\"copy2237\" valign=\"top\" style=\"padding-top: 10px; padding-bottom: 10px;\"><p style=\"margin-top: 20px; margin-bottom: 20px;\">function add(a,b)<br/>{<br/>alert(a+b);<br/>}<br/>function reduce(a,b)<br/>{<br/>alert(a-b);<br/>}<br/>add.call(reduce,1,3) //将add方法运用到reduce,结果为4</p></td></tr></tbody></table><h3 style=\"margin: 0px; padding: 0px; white-space: normal; widows: 1; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\"><strong>二、call可以改变this指向</strong></h3><p style=\"font-size: 14px; white-space: normal; widows: 1; margin-top: 20px; margin-bottom: 20px; padding-top: 0px; padding-bottom: 0px; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\">如下例：</p><table align=\"center\" cellpadding=\"1\" cellspacing=\"1\" width=\"620\"><tbody><tr class=\"firstRow\"><td bgcolor=\"#FFE7CE\" height=\"27\" width=\"464\">&nbsp;代码如下</td><td align=\"center\" bgcolor=\"#FFE7CE\" width=\"109\"><br/></td></tr><tr><td bgcolor=\"#FFFFFF\" class=\"copyclass\" colspan=\"2\" height=\"auto\" id=\"copy3852\" valign=\"top\" style=\"padding-top: 10px; padding-bottom: 10px;\"><p style=\"margin-top: 20px; margin-bottom: 20px;\">function b()<br/>{<br/>alert(this)<br/>}<br/>b(); //window<br/>b.call(); //window<br/>b.call(“a”,2,3); //a</p></td></tr></tbody></table><p style=\"font-size: 14px; white-space: normal; widows: 1; margin-top: 20px; margin-bottom: 20px; padding-top: 0px; padding-bottom: 0px; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\">再看一个复杂的例子：</p><table align=\"center\" cellpadding=\"1\" cellspacing=\"1\" width=\"620\"><tbody><tr class=\"firstRow\"><td bgcolor=\"#FFE7CE\" height=\"27\" width=\"464\">&nbsp;代码如下</td><td align=\"center\" bgcolor=\"#FFE7CE\" width=\"109\"><br/></td></tr><tr><td bgcolor=\"#FFFFFF\" class=\"copyclass\" colspan=\"2\" height=\"auto\" id=\"copy8285\" valign=\"top\" style=\"padding-top: 10px; padding-bottom: 10px;\"><p style=\"margin-top: 20px; margin-bottom: 20px;\">function Animal()<br/>{<br/>this.name=”animal”;<br/>this.showName=function()<br/>{<br/>alert(this.name)<br/>}<br/>}<br/>function Cat()<br/>{<br/>this.name=”cat”;<br/>}<br/>var animal = new Animal();<br/>var cat = new Cat();<br/>animal.showName(); //结果为animal<br/>animal.showName.call(cat); //原本cat没有showName方法，但是通过call方法将animal的showName方法应用到cat上,因此结果为cat</p></td></tr></tbody></table><h3 style=\"margin: 0px; padding: 0px; white-space: normal; widows: 1; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\"><strong>三、实现继承</strong></h3><p style=\"font-size: 14px; white-space: normal; widows: 1; margin-top: 20px; margin-bottom: 20px; padding-top: 0px; padding-bottom: 0px; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\">如下例子：</p><table align=\"center\" cellpadding=\"1\" cellspacing=\"1\" width=\"620\"><tbody><tr class=\"firstRow\"><td bgcolor=\"#FFE7CE\" height=\"27\" width=\"464\">&nbsp;代码如下</td><td align=\"center\" bgcolor=\"#FFE7CE\" width=\"109\"></td></tr><tr><td bgcolor=\"#FFFFFF\" class=\"copyclass\" colspan=\"2\" height=\"auto\" id=\"copy8248\" valign=\"top\" style=\"padding-top: 10px; padding-bottom: 10px;\"><p style=\"margin-top: 20px; margin-bottom: 20px;\">function Animal(name)<br/>{<br/>this.name=name;<br/>this.showName=function()<br/>{<br/>alert(this.name)<br/>}<br/>}<br/>function Cat(name)<br/>{<br/>Animal.call(this,name); //将Animal应用到Cat上，因此Cat拥有了Animal的所有属性和方法<br/>}<br/>var cat = new Cat(“Black Cat”);<br/>cat.showName(); //<a target=\"_blank\" href=\"http://www.7old.com/ruanjian/wangluo-26.html\" class=\"keylink\" style=\"color: rgb(85, 85, 85); text-decoration: none; outline: none;\">浏览器</a>弹出Black Cat</p></td></tr></tbody></table><h3 style=\"margin: 0px; padding: 0px; white-space: normal; widows: 1; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\"><strong>四、apply用法</strong></h3><p style=\"font-size: 14px; white-space: normal; widows: 1; margin-top: 20px; margin-bottom: 20px; padding-top: 0px; padding-bottom: 0px; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\">apply和call的用法只有一个地方不一样，除此之外，其他地方基本一模一样</p><p style=\"font-size: 14px; white-space: normal; widows: 1; margin-top: 20px; margin-bottom: 20px; padding-top: 0px; padding-bottom: 0px; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\">a.call(b,arg1,arg2…)</p><p style=\"font-size: 14px; white-space: normal; widows: 1; margin-top: 20px; margin-bottom: 20px; padding-top: 0px; padding-bottom: 0px; color: rgb(102, 102, 102); font-family: Simsun; line-height: 23px; background-color: rgb(255, 255, 255);\">apply(b,[arg1,arg2]) //apply只有2个参数，它将call的参数（arg1,arg2…）放在一个数组中作为apply的第二参数</p><p><br/></p>', '2016-08-25 15:33:06', '1', '1');
INSERT INTO `article` VALUES ('23', 'js操作cookie并设置失效时间', '戴明儒', '<p><span style=\"font-size: 14px;\">越来越多的地方许多逻辑都放在了前端去实现，今天项目中用到了需要在前端设置cookie并30分钟失效，查了一些资料最终解决下面就贴上代码</span></p><p><span style=\"font-size: 14px;\"><br/></span></p><p><span style=\"font-size: 14px;\">首先是设置cookie</span></p><p><span style=\"font-size: 14px;\"><br/></span></p><p><span style=\"font-size: 14px;\"></span></p><p>function SetCookie(cookieName, cookieValue, nDays) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>/* 当前日期 */</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var today = new Date();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>/* Cookie 过期时间 */</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var expire = new Date();</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>/* 如果未设置nDays参数或者nDays为0，取默认值 1 */</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>if (nDays == null || nDays == 0)</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>nDays = 1;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>/* 计算Cookie过期时间 */</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>expire.setTime(today.getTime() + nDays * 60 * 1000); //获取毫秒数</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>/* 设置Cookie值 */</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>document.cookie = cookieName + &quot;=&quot; + escape(cookieValue) + &quot;;expires=&quot; + expire.toUTCString();</p><p>}</p><p><br/></p><p><span style=\"font-size: 14px;\">然后是获取cookie</span></p><p><span style=\"font-size: 14px;\"></span></p><p>getCookie: function(cookieName) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//取cookie值</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var strCookie = document.cookie;</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>//将cookie值转换成数组并遍历</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>var arrCookie = strCookie.split(&quot;; &quot;);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>for (var i = 0; i &lt; arrCookie.length; i++) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>var arr = arrCookie[i].split(&quot;=&quot;);</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>if (cookieName == arr[0]) {</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">			</span>return arr[1];</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">		</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>}</p><p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>return &quot;&quot;;</p><p>}</p><p><span style=\"font-size: 14px;\">后面需要用的话直接拿轮子就好了<br/></span><br/></p>', '2016-09-06 16:26:03', '1', '1');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(25) NOT NULL,
  `email` varchar(25) NOT NULL,
  `password` varchar(25) NOT NULL,
  `headimgpath` varchar(100) DEFAULT NULL,
  `deleteflag` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', '戴明儒', '523121837@qq.com', '8899248', null, '1');
INSERT INTO `user` VALUES ('2', 'Daiv', 'daimingru1994@qq.com', 'dcf110119', null, '1');
